pipeline {
    agent any
    
    environment {
        DOCKER_HUB_REPO = 'your-dockerhub-username/devops-assignment'
        JIRA_SITE = 'your-jira-site'
        JIRA_PROJECT_KEY = 'DAP'
    }
    
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo 'Code checked out from GitHub'
                script {
                    try {
                        jiraAddComment comment: "Build ${env.BUILD_NUMBER} started: ${env.BUILD_URL}", 
                                    idOrKey: "${JIRA_PROJECT_KEY}-1", 
                                    site: "${JIRA_SITE}"
                    } catch (Exception e) {
                        echo "Jira integration not configured: ${e.message}"
                    }
                }
            }
        }
        
        stage('Build') {
            steps {
                echo 'Building the application...'
                script {
                    def content = readFile('src/index.html')
                    content = content.replaceAll('\\{\\{ BUILD_NUMBER \\}\\}', env.BUILD_NUMBER)
                    content = content.replaceAll('\\{\\{ JIRA_ISSUE \\}\\}', "${JIRA_PROJECT_KEY}-1")
                    content = content.replaceAll('\\{\\{ GIT_COMMIT \\}\\}', env.GIT_COMMIT?.take(7) ?: 'unknown')
                    content = content.replaceAll('\\{\\{ BUILD_DATE \\}\\}', new Date().format('yyyy-MM-dd HH:mm:ss'))
                    writeFile file: 'src/index.html', text: content
                }
                echo 'Application built successfully'
            }
        }
        
        stage('Test') {
            steps {
                echo 'Running tests...'
                script {
                    if (!fileExists('src/index.html')) {
                        error('Application files not found!')
                    }
                    echo 'Basic tests passed'
                }
            }
        }
        
        stage('Performance Testing') {
            steps {
                echo 'Running JMeter Performance Tests...'
                script {
                    try {
                        if (isUnix()) {
                            sh '''
                                cd src
                                python3 -m http.server 8080 &
                                SERVER_PID=$!
                                sleep 5
                                jmeter -n -t ../tests/performance-test.jmx -l jmeter-results.jtl
                                kill $SERVER_PID || true
                            '''
                        } else {
                            bat '''
                                cd src
                                start /B python -m http.server 8080
                                timeout /T 5
                                jmeter -n -t ../tests/performance-test.jmx -l jmeter-results.jtl
                                taskkill /F /IM python.exe /T || echo "No python process found"
                            '''
                        }
                        archiveArtifacts artifacts: 'jmeter-results.jtl', fingerprint: true
                    } catch (Exception e) {
                        echo "Performance testing failed: ${e.message}"
                        echo "JMeter might not be installed or configured properly"
                    }
                }
            }
        }
        
        stage('Docker Build') {
            steps {
                echo 'Building Docker image...'
                script {
                    try {
                        def dockerImage = docker.build("${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}")
                        dockerImage.tag("latest")
                        echo 'Docker image built successfully'
                    } catch (Exception e) {
                        echo "Docker build failed: ${e.message}"
                        echo "Make sure Docker is installed and running"
                    }
                }
            }
        }
        
        stage('Docker Push') {
            steps {
                echo 'Pushing Docker image to Docker Hub...'
                script {
                    try {
                        docker.withRegistry('https://registry.hub.docker.com', 'dockerhub-credentials') {
                            def dockerImage = docker.image("${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}")
                            dockerImage.push()
                            dockerImage.push("latest")
                        }
                        echo 'Docker image pushed successfully'
                    } catch (Exception e) {
                        echo "Docker push failed: ${e.message}"
                        echo "Check Docker Hub credentials and connectivity"
                    }
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
        success {
            echo 'Pipeline completed successfully!'
            script {
                try {
                    jiraAddComment comment: "Build ${env.BUILD_NUMBER} completed successfully! Docker image: ${DOCKER_HUB_REPO}:${env.BUILD_NUMBER}", 
                                idOrKey: "${JIRA_PROJECT_KEY}-1", 
                                site: "${JIRA_SITE}"
                } catch (Exception e) {
                    echo "Jira update failed: ${e.message}"
                }
            }
        }
        failure {
            echo 'Pipeline failed!'
            script {
                try {
                    jiraAddComment comment: "Build ${env.BUILD_NUMBER} failed! Check: ${env.BUILD_URL}", 
                                idOrKey: "${JIRA_PROJECT_KEY}-1", 
                                site: "${JIRA_SITE}"
                } catch (Exception e) {
                    echo "Jira update failed: ${e.message}"
                }
            }
        }
    }
}
